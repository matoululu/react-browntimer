{"version":3,"sources":["images/browntimer.svg","layout/Header.js","components/SalaryForm.js","layout/Main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","timer","className","src","logo","alt","totalEarned","SalaryForm","props","amountRef","React","createRef","earnedRef","salaryRadio","handleChange","bind","handleSubmit","handleClick","state","seconds","earned","isActive","e","target","checked","this","changePayType","preventDefault","setState","amount","current","value","payType","localStorage","getItem","startTimer","clearInterval","id","placeholder","setItem","type","setInterval","tick","console","log","earnedPerSecond","calculateSalary","salary","Math","round","toFixed","getPayType","getWage","ref","action","onSubmit","name","min","maxLength","onChange","defaultChecked","htmlFor","onClick","Component","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d8fe747.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/browntimer.10f99b3b.svg\";","import logo from '../images/browntimer.svg';\n\nfunction Header() {\n  return (\n    <header className=\"container\">\n      <img src={logo} className=\"logo\" alt=\"logo\" />\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nlet totalEarned = 0;\nlet truncatedEarnings = 0.00;\nlet timer;\n\nclass SalaryForm extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.amountRef = React.createRef();\n    this.earnedRef = React.createRef();\n    this.salaryRadio = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.state = { seconds: 0, earned: 0, isActive: false};\n  }\n\n  handleChange(e) {\n    e.target.checked = true;\n    this.changePayType(e);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n  }\n\n  handleClick(e) {\n\n\n    this.setState(state => ({\n      isActive: !state.isActive\n    }));\n\n    if(this.state.isActive === false) {\n      const amount = this.amountRef.current.value;\n      const payType = localStorage.getItem('payType');\n      this.startTimer(amount, payType);\n    } else {\n      clearInterval(timer);\n      this.setState(state => ({\n        seconds: 0\n      }));\n    }\n  }\n\n  changePayType(e) {\n    if(e.target.id === 'salary') {\n      this.amountRef.current.placeholder = 'Your salary';\n      localStorage.setItem('payType', 'salary');\n    } else {\n      this.amountRef.current.placeholder = 'Your hourly wage';\n      localStorage.setItem('payType', 'hourly');\n    }\n  }\n\n  startTimer(amount, type) {\n    if(amount) {\n      localStorage.setItem('wage', amount);\n      timer = setInterval(() => this.tick(amount, type), 1000)\n\n    } else {\n      console.log('empty')\n    }\n  }\n\n  tick(amount, type) {\n    const earnedPerSecond = this.calculateSalary(amount, type);\n\n    this.setState(state => ({\n      seconds: state.seconds + 1,\n      earned: earnedPerSecond\n    }));\n  }\n\n  calculateSalary(salary, type) {\n    if(type === 'salary') {\n      const salaryToHours = salary/2080;\n      const salaryToMinutes = salaryToHours/60;\n      const salaryToSeconds = salaryToMinutes/60;\n\n      totalEarned += salaryToSeconds;\n\n    } else {\n      const salaryToMinutes = salary/60;\n      const salaryToSeconds = salaryToMinutes/60;\n\n      totalEarned += salaryToSeconds;\n    }\n\n    truncatedEarnings = Math.round(totalEarned * 100)/100;\n    return truncatedEarnings.toFixed(2);\n  }\n\n  componentDidMount() {\n    const getPayType = localStorage.getItem('payType');\n    const getWage = localStorage.getItem('wage');\n\n    if(getPayType === 'salary') {\n      this.salaryRadio.current.checked = true;\n      this.amountRef.current.placeholder = 'Your salary';\n    }\n\n    if(getWage) {\n      this.amountRef.current.value = getWage;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"timer\">\n          <p>You've earned:</p>\n          <h1>$<span ref={this.earnedRef}>{this.state.earned}</span></h1>\n        </div>\n\n        <form action=\"submit\" onSubmit={this.handleSubmit}>\n          <input ref={this.amountRef} type=\"number\" name=\"input\" id=\"input\" min=\"1\" maxLength=\"20\" placeholder=\"Your hourly wage\"/>\n          <div className=\"form__toggle\">\n            <input onChange={this.handleChange} type=\"radio\" id=\"hourly\" name=\"calculate\" defaultChecked/>\n            <label className=\"label--hourly\" htmlFor=\"hourly\">Use hourly</label>\n            <input ref={this.salaryRadio} onChange={this.handleChange} type=\"radio\" id=\"salary\" name=\"calculate\"/>\n            <label className=\"label--salary\" htmlFor=\"salary\">Use salary</label>\n          </div>\n          <button className=\"start-timer\" onClick={this.handleClick}>{this.state.isActive ? 'Stop' : 'Start'}</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SalaryForm;\n","import SalaryForm from '../components/SalaryForm.js';\n\nfunction Main() {\n  return (\n    <main className=\"container\">\n      <SalaryForm/>\n    </main>\n  );\n}\n\nexport default Main;\n","\nimport './css/styles.scss';\nimport Header from './layout/Header.js';\nimport Main from './layout/Main.js';\n\nfunction App() {\n  return (\n    <div>\n      <Header/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}